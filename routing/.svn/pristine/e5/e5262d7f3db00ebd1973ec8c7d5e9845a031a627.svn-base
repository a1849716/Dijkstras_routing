#include <iostream>
#include <vector>
#include<string>
#include "node.cpp"
using namespace std; 

void process_input(){
  vector<string> known, prev, dist, nodes_all;

  string temp;
  cin >> temp;
  nodes_all.push_back(temp);
  while(temp != "END"){
    //do something
  }
};

/*
prints out neighbour table for node x 
expected output: 
  X Neighbour Table:
  Y|5
  Z|1
*/
void neighbour_table(node x){

}

/*
prints out LSDB table for node x 
expected output:
  X LSDB:
    X|Y|2
    X|Z|7
    Y|Z|1
*/
void lsdb_table(node x){

}

/*
prints out routing table for node x 
expected output:
  X Routing Table:
    Y|Y|2
    Z|Y|3
 
*/
void routing_table(node x){

}


/*
returns the closes path from start to end
*/
vector<node> closes_path(node start, node end){

};

/*
list of all neighbouring nodes, runs neighbour_table() function at the end
*/
vector<node> closest_nodes(node){

};

/*
At each node x:

INITIALISATION:
N’ = {u} 
for all nodes v 
    if v is a neighbor of u
        then D(v) = c(u,v) 
    else D(v) = ∞ 

LOOP
find w not in N' such that D(w) is a minimum
add w to N’ 
update D(v) for each neighbor v of w and not in N':
    D(v) = min(D(v), D(w) + c(w,v)) 
    /* new cost to v is either old cost to v or known least path cost to w plus cost from w to v
until N' = N
*/
vector<int> dijkstra(node current_node, int node_num){
  vector<vector<node>> cheapest;
  for(int i = 0; i < node_num; i++){
    cheapest.push_back(current_node.neighbour_node)

  }
}

int main(){
  vector<int> known, prev, dist, nodes_all;

}

